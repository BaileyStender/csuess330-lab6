---
project:
  title: "Lab6.qmd"
  author: "Bailey Stender"
  output-dir: Docs
  type: website
format:
  html:
    self-contained: true
editor: visual
---

```{r}
library(tidyverse)
library(tidymodels)
library(powerjoin)
library(glue)
library(vip)
library(baguette)
```



##Q1


```{r}
root  <- 'https://gdex.ucar.edu/dataset/camels/file'
```

```{r}
download.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', 
              'data/camels_attributes_v2.0.pdf')
```

```{r}
types <- c("clim", "geol", "soil", "topo", "vege", "hydro")
```

```{r}
# Where the files live online ...
remote_files  <- glue('{root}/camels_{types}.txt')
# where we want to download the data ...
local_files   <- glue('data/camels_{types}.txt')
```

```{r}
walk2(remote_files, local_files, download.file, quiet = TRUE)
```

```{r}
# Read and merge data
camels <- map(local_files, read_delim, show_col_types = FALSE) 
```

```{r}
camels <- power_full_join(camels ,by = 'gauge_id')
```



##Question 1: From the doccumentation PDF, zero_q_freq means frequency of days with Q = 0 mm/day. Q means discharge. 

##Q2


```{r}
ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = q_mean)) +
  scale_color_gradient(low = "pink", high = "dodgerblue") +
  ggthemes::theme_map()
```

```{r}

p1 <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = p_mean)) +
  scale_color_gradient(low = "lightblue", high = "blue") +
  ggthemes::theme_map() +
  labs(color = "Precipitation mm/d") +
  ggtitle("Mean Daily Precipitation of River Basin Sites")

p2 <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = aridity)) +
  scale_color_gradient(low = "yellow", high = "red") +
  ggthemes::theme_map() +
  labs(color = "Aridity") +
  ggtitle("Aridity of River Basin Site")

p1 + p2 + plot_layout(ncol = 2)

```



##Q3



```{r}
camels |> 
  select(aridity, p_mean, q_mean) |> 
  drop_na() |> 
  cor()
```

```{r}
# Create a scatter plot of aridity vs rainfall
ggplot(camels, aes(x = aridity, y = p_mean)) +
  # Add points colored by mean flow
  geom_point(aes(color = q_mean)) +
  # Add a linear regression line
  geom_smooth(method = "lm", color = "red", linetype = 2) +
  # Apply the viridis color scale
  scale_color_viridis_c() +
  # Add a title, axis labels, and theme (w/ legend on the bottom)
  theme_linedraw() + 
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")
```

```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  scale_color_viridis_c() +
  # Apply log transformations to the x and y axes
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")
```

```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  # Apply a log transformation to the color scale
  scale_color_viridis_c(trans = "log") +
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom",
        # Expand the legend width ...
        legend.key.width = unit(2.5, "cm"),
        legend.key.height = unit(.5, "cm")) + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow") 
```

```{r}
set.seed(123)
# Bad form to perform simple transformations on the outcome variable within a 
# recipe. So, we'll do it here.
camels <- camels |> 
  mutate(logQmean = log(q_mean))

# Generate the split
camels_split <- initial_split(camels, prop = 0.8)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

camels_cv <- vfold_cv(camels_train, v = 10)
```

```{r}
# Create a recipe to preprocess the data
rec <-  recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%
  # Log transform the predictor variables (aridity and p_mean)
  step_log(all_predictors()) %>%
  # Add an interaction term between aridity and p_mean
  step_interact(terms = ~ aridity:p_mean) |> 
  # Drop any rows with missing values in the pred
  step_naomit(all_predictors(), all_outcomes())
```

```{r}
# Prepare the data
baked_data <- prep(rec, camels_train) |> 
  bake(new_data = NULL)

# Interaction with lm
#  Base lm sets interaction terms with the * symbol
lm_base <- lm(logQmean ~ aridity * p_mean, data = baked_data)
summary(lm_base)

```

```{r}
# Sanity Interaction term from recipe ... these should be equal!!
summary(lm(logQmean ~ aridity + p_mean + aridity_x_p_mean, data = baked_data))
```

```{r}
test_data <-  bake(prep(rec), new_data = camels_test)
test_data$lm_pred <- predict(lm_base, newdata = test_data)
```

```{r}
metrics(test_data, truth = logQmean, estimate = lm_pred)
```



#A: Linear Regression Model Workflow



```{r}

lm_model <- linear_reg() %>%
  set_engine("lm") %>%
  set_mode("regression")

lm_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(lm_model) %>%
  fit(data = camels_train) 

summary(extract_fit_engine(lm_wf))$coefficients

summary(lm_base)$coefficients

lm_data <- augment(lm_wf, new_data = camels_test)
dim(lm_data)

metrics(lm_data, truth = logQmean, estimate = .pred)

ggplot(lm_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()

```



#B: Random forest model workflow



```{r}

library(baguette)
rf_model <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

rf_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(rf_model) %>%
  fit(data = camels_train) 

rf_data <- augment(rf_wf, new_data = camels_test)
dim(rf_data)

metrics(rf_data, truth = logQmean, estimate = .pred)

ggplot(rf_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()

```




#C: Build a xgboost (engine) regression (mode) model using boost_tree



```{r}

library(baguette)
library(tidymodels)
library(ggplot2)
library(viridis)
library(parsnip)

xgb_model <- boost_tree() %>%
  set_engine("xgboost") %>%
  set_mode("regression")

xgb_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(xgb_model) %>%
  fit(data = camels_train) 

xgb_data <- augment(xgb_wf, new_data = camels_test)

dim(xgb_data)

metrics(xgb_data, truth = logQmean, estimate = .pred)

ggplot(xgb_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()

```



##D: Build a neural network model using the nnet engine from the baguette package using the bag_mlp function



```{r}

library(baguette)
library(tidymodels)
library(ggplot2)
library(viridis)

nn_model <- bag_mlp() %>%
  set_engine("nnet") %>%
  set_mode("regression")

nn_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(nn_model) %>%
  fit(data = camels_train) 

nn_data <- augment(nn_wf, new_data = camels_test)

dim(nn_data)

metrics(nn_data, truth = logQmean, estimate = .pred)

ggplot(nn_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()

```



#E: Workflows set



```{r}
wf <- workflow_set(list(rec), list(lm_model, rf_model, nn_model, xgb_model)) %>%
  workflow_map('fit_resamples', resamples = camels_cv) 

autoplot(wf)

rank_results(wf, rank_metric = "rsq", select_best = TRUE)
```



#F: The model that performs the best for this dataset is the bag_mlp function because it has the lowest Root mean squared error and highest root squared. 


#Q4: Build Your Own



```{r}
library(tidyverse)
library(tidymodels)
library(powerjoin)
library(glue)
library(vip)
library(baguette)

#Data splitting

set.seed(123)
camels <- camels |> 
  mutate(logQmean = log(q_mean))

camels_split2 <- initial_split(camels, prop = 0.75)
camels_train2 <- training(camels_split2)
camels_test2  <- testing(camels_split2)

camels_cv2 <- vfold_cv(camels_train2, v = 10)

#Recipe

rec2 <-  recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%
  step_log(all_predictors()) %>%
  step_interact(terms = ~ aridity:p_mean) |> 
  step_naomit(all_predictors(), all_outcomes())

test_data2 <-  bake(prep(rec2), new_data = camels_test2)
test_data2$lm_pred <- predict(lm_base, newdata = test_data2)

#Define 3 models

#Model 1

rf_model2 <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

rf_wf2 <- workflow() %>%
  add_recipe(rec2) %>%
  add_model(rf_model2) %>%
  fit(data = camels_train2) 

#Model 2

xgb_model2 <- boost_tree() %>%
  set_engine("xgboost") %>%
  set_mode("regression")

xgb_wf2 <- workflow() %>%
  add_recipe(rec2) %>%
  add_model(xgb_model) %>%
  fit(data = camels_train2) 

#Model 3

nn_model2 <- bag_mlp() %>%
  set_engine("nnet") %>%
  set_mode("regression")

nn_wf2 <- workflow() %>%
  add_recipe(rec2) %>%
  add_model(nn_model2) %>%
  fit(data = camels_train2) 

#Workflow Set

wf2 <- workflow_set(list(rec2), list(rf_model2, nn_model2, xgb_model2)) %>%
  workflow_map('fit_resamples', resamples = camels_cv2) 

autoplot(wf2)

rank_results(wf2, rank_metric = "rsq", select_best = TRUE)

```



## I believe the best model is the rand_forest model because it had the highest r-squared value and lowest root mean squared error.




```{r}

rf_wf2 <- workflow() %>%
  add_recipe(rec2) %>%
  add_model(rf_model2) %>%
  fit(data = camels_train2)

rf_data2 <- augment(rf_wf2, new_data = camels_test2)

dim(rf_data2)

metrics(rf_data2, truth = logQmean, estimate = .pred)

ggplot(rf_data2, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()

```



## The results correlate with the results from the workflow set comparison because the model is pretty good at predicting with the r-squared value of 0.7111, but the model could be better. The points are sort of scattered near the lower section.






